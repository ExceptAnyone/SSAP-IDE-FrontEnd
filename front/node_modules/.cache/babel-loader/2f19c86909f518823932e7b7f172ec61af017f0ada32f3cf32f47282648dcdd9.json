{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addFile, addFolder } from \"../../../fileSlice/FileSlice\";\nimport axios from \"axios\";\nimport { useMutation } from \"react-query\";\nimport { createFileAPI } from \"../../../../../api/ideAPI/createFileAPI\";\nimport { saveAsAPI } from \"../../../../../api/ideAPI/saveAsAPI\";\nimport { createFolderAPI } from \"../../../../../api/ideAPI/createFolderAPI\";\nimport { saveFileAPI } from \"../../../../../api/ideAPI/saveFileAPI\";\nimport { editFileNameAPI } from \"../../../../../api/ideAPI/editFileNameAPI\";\nimport { updateFolderNameAPI } from \"../../../../../api/ideAPI/folderEditAPI\";\nimport { deleteFolderAPI } from \"../../../../../api/ideAPI/deleteFolderAPI\";\nimport { deleteFileAPI } from \"../../../../../api/ideAPI/deleteFileAPI\";\nexport default function useFileAction() {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [folders, setFolders] = useState([]);\n  const selectFileId = useSelector(state => state.file.selectFileId);\n  const [saveStatus, setSaveStatus] = useState(null);\n  const dispatch = useDispatch();\n  const fileData = useSelector(state => state.file.data);\n\n  // const createFileMutation = useMutation(createFileAPI, {\n  //   onError: (error) => {\n  //     console.error(\"파일 생성 에러:\", error);\n  //   },\n  //   onSuccess: (data) => {\n  //     console.log(\"새 파일 생성 성공:\", data);\n  //     // 리덕스나 로컬 상태 업데이트 로직 추가\n  //     const newFileData = {\n  //       id: Date.now().toString(),\n  //       parent: selectFileId || 0,\n  //       droppable: false,\n  //       text: data.fileName,\n  //       // data: {\n  //       //   fileType: \"text\", // 기본 파일 타입 \"text\" TODO\n  //       //   path: data.Path,\n  //       // },\n  //     };\n  //     dispatch(addFile(newFileData));\n  //   },\n  // });\n\n  // const createFile = (parentFileId, name, type, ext, path, content) => {\n  //   createFileMutation.mutate({\n  //     containerId: \"exampleContainerId\", // TODO: 실제 containerId로 교체\n  //     parentFileId,\n  //     name,\n  //     type,\n  //     ext,\n  //     path,\n  //     content,\n  //   });\n  // };\n\n  // TODO 모킹데이터를 이용한 새 파일 생성\n  const createFile = () => {\n    // 모킹 데이터 TODO\n    const mockResponse = {\n      status: 201,\n      message: \"파일 생성\",\n      data: {\n        Path: \"/example/path\",\n        fileName: \"NewFile\"\n      }\n    };\n    const newFileData = {\n      id: Date.now().toString(),\n      // 유니크한 ID 생성 (실제로는 다른 방식으로 생성해야 함)\n      parent: selectFileId || 0,\n      // 선택된 폴더가 있으면 그 폴더에 추가, 없으면 최상위에 추가\n      droppable: false,\n      text: \"New File\",\n      data: {\n        fileType: \"text\" // TODO 기본 파일 타입 \"text\"\n      }\n    };\n\n    console.log(\"newFileData\", newFileData);\n    dispatch(addFile(newFileData));\n    if (mockResponse.status === 201) {\n      // 폴더 생성 성공시 화면에 폴더 추가\n      setFiles(prevFiles => {\n        const newFiles = [...prevFiles, {\n          path: mockResponse.data.Path,\n          fileName: mockResponse.data.fileName\n        }];\n        console.log(\"Updated file:\", newFiles); // TODO 추후 삭제\n        return newFiles;\n      });\n    } else {\n      // 다른 상태 코드에 따른 처리 로직\n      alert(mockResponse.message);\n    }\n  };\n\n  // const createFolderMutation = useMutation(createFolderAPI, {\n  //   onError: (error) => {\n  //     console.error(\"폴더 생성 에러:\", error);\n  //   },\n  //   onSuccess: (data) => {\n  //     console.log(\"새 폴더 생성 성공:\", data);\n  //     console.log(\"selectFileId\", selectFileId);\n  //     console.log(\"fileData\", fileData);\n  //     // 리덕스나 로컬 상태 업데이트 로직 추가\n  //     const newFolderData = {\n  //       id: 1,\n  //       parent: selectFileId || 0,\n  //       droppable: true,\n  //       text: \"newFolder\",\n\n  //       // data: {\n  //       //   fileType: \"folder\", // 폴더 타입 지정\n  //       //   path: data.Path,\n  //       // },\n  //     };\n  //     console.log(\"selectFileId\", selectFileId);\n  //     console.log(\"fileData\", fileData);\n\n  //     dispatch(addFolder(newFolderData));\n  //     console.log(\"selectFileId\", selectFileId);\n  //     console.log(\"fileData\", fileData);\n  //     console.log(\"newFolderData\", newFolderData);\n  //   },\n  // });\n\n  // const createFolder = (path, folderName) => {\n  //   console.log(\"folderName\", folderName);\n  //   console.log(\"parentId\", selectFileId);\n\n  //   createFolderMutation.mutate({\n  //     parentFolderId: selectFileId || 0, // 선택된 파일 or 폴더의 ID\n  //     name: \"newFolder\",\n  //     type: false, // 폴더 타입 지정\n  //     path: \"/hello/hello2\",\n  //   });\n  // };\n\n  const createFolder = () => {\n    //폴더 생성 모킹 데이터 TODO 추후 삭제\n    const mockCreateFolderResponse = {\n      status: 201,\n      message: \"폴더 생성 성공\",\n      data: {\n        id: Date.now().toString(),\n        // 유니크한 폴더 ID\n        name: \"newFolder\",\n        path: \"/current/path/newFolder\",\n        created_at: \"2023-09-27T12:00:00Z\"\n      }\n    };\n\n    // mockCreateFolderResponse를 사용하여 폴더 생성 로직을 시뮬레이션\n    const response = mockCreateFolderResponse;\n    if (response.status === 201) {\n      const newFolderData = {\n        id: response.data.id,\n        parent: selectFileId || 0,\n        droppable: true,\n        text: response.data.name,\n        // 여기에 폴더의 이름을 지정\n        type: \"folder\"\n      };\n      dispatch(addFolder(newFolderData)); // 리덕스 스토어 업데이트\n    } else {\n      alert(response.message);\n    }\n  };\n\n  // const saveFileMutation = useMutation(saveFileAPI, {\n  //   onError: (error) => {\n  //     console.error(\"파일 저장 에러:\", error);\n  //   },\n  //   onSuccess: (data) => {\n  //     console.log(\"파일 저장 성공:\", data);\n  //     setSaveStatus(\"success\");\n  //   },\n  //   onMutate: () => {\n  //     setSaveStatus(\"pending\");\n  //   },\n  // });\n\n  // const saveFile = (fileId, path, fileName, content) => {\n  //   saveFileMutation.mutate({\n  //     containerId: \"exampleContainerId\", // TODO: 실제 containerId로 교체\n  //     fileId,\n  //     path,\n  //     fileName,\n  //     content,\n  //   });\n  // };\n  const saveFile = async fileData => {\n    try {\n      // 가상의 모킹 데이터로 응답 TODO\n      const mockResponse = {\n        status: 200,\n        message: \"File saved successfully!\",\n        data: {\n          ...fileData,\n          id: Date.now().toString() // 예시로 파일에 대한 고유 ID를 생성\n        }\n      };\n\n      // 200 상태 코드를 통해 성공적으로 처리되었다고 가정\n      if (mockResponse.status === 200) {\n        setSaveStatus(\"success\");\n        console.log(\"File saved (mock):\", mockResponse.data);\n        return mockResponse.data; // 혹은 원하는 데이터 반환\n      } else {\n        setSaveStatus(\"failed\");\n        throw new Error(mockResponse.message);\n      }\n    } catch (error) {\n      setSaveStatus(\"failed\");\n      console.error(\"Error saving the file:\", error);\n      throw error;\n    }\n  };\n  const onSaveAs = async (newFileName, currentFilePath, currentFileContent) => {\n    try {\n      const response = await saveAsAPI(\"exampleContainerId\",\n      // TODO: 실제 containerId로 교체\n      selectFileId,\n      // 현재 선택된 파일의 ID\n      currentFilePath, newFileName, currentFileContent);\n      if (response.status === 200) {\n        console.log(\"파일이 성공적으로 복제되었습니다:\", response.data);\n        // 필요하면 여기서 추가적인 상태 업데이트 또는 로직 수행\n      } else {\n        throw new Error(response.message);\n      }\n    } catch (error) {\n      console.error(\"다른 이름으로 파일 저장 실패:\", error.message);\n      if (error.response) {\n        switch (error.response.status) {\n          case 400:\n            alert(\"파라미터 필수 항목이 누락되었거나 형식이 잘못되었습니다.\");\n            break;\n          case 403:\n            alert(\"해당 파일을 변경할 권한이 없습니다.\");\n            break;\n          case 404:\n            alert(\"원본 파일을 찾을 수 없어 다른 이름으로 파일 저장이 불가능 합니다.\");\n            break;\n          case 409:\n            alert(\"동일한 이름의 파일이 이미 해당 경로에 존재합니다.\");\n            break;\n          case 500:\n          default:\n            alert(\"요청을 처리하는 중에 서버에서 오류가 발생했습니다.\");\n            break;\n        }\n      }\n    }\n  };\n\n  // axios.post 를 이용한 모킹데이터\n  // try {\n  //   // 모킹 데이터 (실제 백엔드 연결 시 해당 URL을 사용)\n  //   const API_URL = \"/api/saveFile\"; // 가상의 API endpoint\n  //   const response = await axios.post(API_URL, fileData);\n\n  //   // 만약 실제로 백엔드와 연동한다면, 백엔드의 응답 형식에 따라 아래 코드를 조정해야 합니다.\n  //   if (response.status === 200) {\n  //     setSaveStatus(\"success\");\n  //     return response.data; // 혹은 원하는 데이터 반환\n  //   } else {\n  //     setSaveStatus(\"failed\");\n  //     throw new Error(response.data.message);\n  //   }\n  // } catch (error) {\n  //   setSaveStatus(\"failed\");\n  //   console.error(\"Error saving the file:\", error);\n  //   throw error;\n  // }\n\n  const editFolderNameMutation = useMutation(updateFolderNameAPI, {\n    onError: error => {\n      console.error(\"폴더 이름 수정 에러:\", error);\n    },\n    onSuccess: data => {\n      console.log(\"폴더 이름 수정 성공:\", data.message);\n      // 리덕스 상태 업데이트 로직 추가 TODO\n    }\n  });\n\n  const editFolderName = newName => {\n    editFolderNameMutation.mutate({\n      newFolderName: newName\n    });\n  };\n  const editFileName = (fileId, newName) => {\n    editFileNameMutation.mutate({\n      fileId,\n      newName\n      // 다른 필요한 인자들 추가...TODO\n    });\n  };\n\n  const editFileNameMutation = useMutation(editFileNameAPI, {\n    onError: error => {\n      console.error(\"파일 이름 수정 에러:\", error);\n    },\n    onSuccess: data => {\n      console.log(\"파일 이름 수정 성공:\", data);\n      // 필요한 경우, 리덕스나 로컬 상태 업데이트 로직 추가 TODO\n    }\n  });\n\n  /////////////////delete 관련\n  const deleteFolderMutation = useMutation(deleteFolderAPI, {\n    onError: error => {\n      console.error(\"폴더 삭제 에러:\", error);\n    },\n    onSuccess: data => {\n      console.log(\"폴더 삭제 성공:\", data.message);\n      // 리덕스나 로컬 상태 업데이트 로직 추가 TODO\n    }\n  });\n\n  const deleteFolder = folderId => {\n    deleteFolderMutation.mutate(folderId);\n  };\n  const deleteFileMutation = useMutation(deleteFileAPI, {\n    onError: error => {\n      switch (error.message) {\n        case \"파라미터 필수 항목이 누락되었거나 형식이 잘못되었습니다.\":\n          console.error(\"파일 삭제 에러: 잘못된 파라미터\");\n          break;\n        case \"해당 파일을 삭제할 권한이 없습니다.\":\n          console.error(\"파일 삭제 권한이 없습니다.\");\n          break;\n        case \"지정된 경로에 해당하는 파일이 존재하지 않습니다.\":\n          console.error(\"파일 삭제 에러: 파일을 찾을 수 없습니다.\");\n          break;\n        default:\n          console.error(\"파일 삭제 중 알 수 없는 오류가 발생했습니다.\", error);\n          break;\n      }\n    },\n    onSuccess: data => {\n      console.log(\"파일 삭제 성공:\", data.message);\n      //리덕스 상태 업데이트 로직 추가 TODO\n    }\n  });\n\n  const deleteFile = (fileId, path, fileName) => {\n    deleteFileMutation.mutate({\n      containerId: \"exampleContainerId\",\n      // TODO: 실제 containerId로 교체\n      fileId,\n      path,\n      fileName\n    });\n  };\n  return {\n    createFile,\n    createFolder,\n    selectFileId,\n    saveFile,\n    saveStatus,\n    onSaveAs,\n    editFileName,\n    editFolderName,\n    deleteFolder,\n    deleteFile\n  };\n}\n_s(useFileAction, \"SQH4LqxbQ4jhsTiWFzg01onRdg8=\", false, function () {\n  return [useSelector, useDispatch, useSelector, useMutation, useMutation, useMutation, useMutation];\n});","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","addFile","addFolder","axios","useMutation","createFileAPI","saveAsAPI","createFolderAPI","saveFileAPI","editFileNameAPI","updateFolderNameAPI","deleteFolderAPI","deleteFileAPI","useFileAction","_s","files","setFiles","folders","setFolders","selectFileId","state","file","saveStatus","setSaveStatus","dispatch","fileData","data","createFile","mockResponse","status","message","Path","fileName","newFileData","id","Date","now","toString","parent","droppable","text","fileType","console","log","prevFiles","newFiles","path","alert","createFolder","mockCreateFolderResponse","name","created_at","response","newFolderData","type","saveFile","Error","error","onSaveAs","newFileName","currentFilePath","currentFileContent","editFolderNameMutation","onError","onSuccess","editFolderName","newName","mutate","newFolderName","editFileName","fileId","editFileNameMutation","deleteFolderMutation","deleteFolder","folderId","deleteFileMutation","deleteFile","containerId"],"sources":["/Users/seongsuk/SSAP-IDE-FrontEnd/front/src/components/ide/ideUI/header/file/useFileAction.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addFile, addFolder } from \"../../../fileSlice/FileSlice\";\nimport axios from \"axios\";\nimport { useMutation } from \"react-query\";\nimport { createFileAPI } from \"../../../../../api/ideAPI/createFileAPI\";\nimport { saveAsAPI } from \"../../../../../api/ideAPI/saveAsAPI\";\nimport { createFolderAPI } from \"../../../../../api/ideAPI/createFolderAPI\";\nimport { saveFileAPI } from \"../../../../../api/ideAPI/saveFileAPI\";\nimport { editFileNameAPI } from \"../../../../../api/ideAPI/editFileNameAPI\";\nimport { updateFolderNameAPI } from \"../../../../../api/ideAPI/folderEditAPI\";\nimport { deleteFolderAPI } from \"../../../../../api/ideAPI/deleteFolderAPI\";\nimport { deleteFileAPI } from \"../../../../../api/ideAPI/deleteFileAPI\";\n\nexport default function useFileAction() {\n  const [files, setFiles] = useState([]);\n  const [folders, setFolders] = useState([]);\n  const selectFileId = useSelector((state) => state.file.selectFileId);\n  const [saveStatus, setSaveStatus] = useState(null);\n  const dispatch = useDispatch();\n  const fileData = useSelector((state) => state.file.data);\n\n  // const createFileMutation = useMutation(createFileAPI, {\n  //   onError: (error) => {\n  //     console.error(\"파일 생성 에러:\", error);\n  //   },\n  //   onSuccess: (data) => {\n  //     console.log(\"새 파일 생성 성공:\", data);\n  //     // 리덕스나 로컬 상태 업데이트 로직 추가\n  //     const newFileData = {\n  //       id: Date.now().toString(),\n  //       parent: selectFileId || 0,\n  //       droppable: false,\n  //       text: data.fileName,\n  //       // data: {\n  //       //   fileType: \"text\", // 기본 파일 타입 \"text\" TODO\n  //       //   path: data.Path,\n  //       // },\n  //     };\n  //     dispatch(addFile(newFileData));\n  //   },\n  // });\n\n  // const createFile = (parentFileId, name, type, ext, path, content) => {\n  //   createFileMutation.mutate({\n  //     containerId: \"exampleContainerId\", // TODO: 실제 containerId로 교체\n  //     parentFileId,\n  //     name,\n  //     type,\n  //     ext,\n  //     path,\n  //     content,\n  //   });\n  // };\n\n  // TODO 모킹데이터를 이용한 새 파일 생성\n  const createFile = () => {\n    // 모킹 데이터 TODO\n    const mockResponse = {\n      status: 201,\n      message: \"파일 생성\",\n      data: {\n        Path: \"/example/path\",\n        fileName: \"NewFile\",\n      },\n    };\n\n    const newFileData = {\n      id: Date.now().toString(), // 유니크한 ID 생성 (실제로는 다른 방식으로 생성해야 함)\n      parent: selectFileId || 0, // 선택된 폴더가 있으면 그 폴더에 추가, 없으면 최상위에 추가\n      droppable: false,\n      text: \"New File\",\n      data: {\n        fileType: \"text\", // TODO 기본 파일 타입 \"text\"\n      },\n    };\n    console.log(\"newFileData\", newFileData);\n    dispatch(addFile(newFileData));\n\n    if (mockResponse.status === 201) {\n      // 폴더 생성 성공시 화면에 폴더 추가\n      setFiles((prevFiles) => {\n        const newFiles = [\n          ...prevFiles,\n          {\n            path: mockResponse.data.Path,\n            fileName: mockResponse.data.fileName,\n          },\n        ];\n        console.log(\"Updated file:\", newFiles); // TODO 추후 삭제\n        return newFiles;\n      });\n    } else {\n      // 다른 상태 코드에 따른 처리 로직\n      alert(mockResponse.message);\n    }\n  };\n\n  // const createFolderMutation = useMutation(createFolderAPI, {\n  //   onError: (error) => {\n  //     console.error(\"폴더 생성 에러:\", error);\n  //   },\n  //   onSuccess: (data) => {\n  //     console.log(\"새 폴더 생성 성공:\", data);\n  //     console.log(\"selectFileId\", selectFileId);\n  //     console.log(\"fileData\", fileData);\n  //     // 리덕스나 로컬 상태 업데이트 로직 추가\n  //     const newFolderData = {\n  //       id: 1,\n  //       parent: selectFileId || 0,\n  //       droppable: true,\n  //       text: \"newFolder\",\n\n  //       // data: {\n  //       //   fileType: \"folder\", // 폴더 타입 지정\n  //       //   path: data.Path,\n  //       // },\n  //     };\n  //     console.log(\"selectFileId\", selectFileId);\n  //     console.log(\"fileData\", fileData);\n\n  //     dispatch(addFolder(newFolderData));\n  //     console.log(\"selectFileId\", selectFileId);\n  //     console.log(\"fileData\", fileData);\n  //     console.log(\"newFolderData\", newFolderData);\n  //   },\n  // });\n\n  // const createFolder = (path, folderName) => {\n  //   console.log(\"folderName\", folderName);\n  //   console.log(\"parentId\", selectFileId);\n\n  //   createFolderMutation.mutate({\n  //     parentFolderId: selectFileId || 0, // 선택된 파일 or 폴더의 ID\n  //     name: \"newFolder\",\n  //     type: false, // 폴더 타입 지정\n  //     path: \"/hello/hello2\",\n  //   });\n  // };\n\n  const createFolder = () => {\n    //폴더 생성 모킹 데이터 TODO 추후 삭제\n    const mockCreateFolderResponse = {\n      status: 201,\n      message: \"폴더 생성 성공\",\n      data: {\n        id: Date.now().toString(), // 유니크한 폴더 ID\n        name: \"newFolder\",\n        path: \"/current/path/newFolder\",\n        created_at: \"2023-09-27T12:00:00Z\",\n      },\n    };\n\n    // mockCreateFolderResponse를 사용하여 폴더 생성 로직을 시뮬레이션\n    const response = mockCreateFolderResponse;\n\n    if (response.status === 201) {\n      const newFolderData = {\n        id: response.data.id,\n        parent: selectFileId || 0,\n        droppable: true,\n        text: response.data.name, // 여기에 폴더의 이름을 지정\n        type: \"folder\",\n      };\n      dispatch(addFolder(newFolderData)); // 리덕스 스토어 업데이트\n    } else {\n      alert(response.message);\n    }\n  };\n\n  // const saveFileMutation = useMutation(saveFileAPI, {\n  //   onError: (error) => {\n  //     console.error(\"파일 저장 에러:\", error);\n  //   },\n  //   onSuccess: (data) => {\n  //     console.log(\"파일 저장 성공:\", data);\n  //     setSaveStatus(\"success\");\n  //   },\n  //   onMutate: () => {\n  //     setSaveStatus(\"pending\");\n  //   },\n  // });\n\n  // const saveFile = (fileId, path, fileName, content) => {\n  //   saveFileMutation.mutate({\n  //     containerId: \"exampleContainerId\", // TODO: 실제 containerId로 교체\n  //     fileId,\n  //     path,\n  //     fileName,\n  //     content,\n  //   });\n  // };\n  const saveFile = async (fileData) => {\n    try {\n      // 가상의 모킹 데이터로 응답 TODO\n      const mockResponse = {\n        status: 200,\n        message: \"File saved successfully!\",\n        data: {\n          ...fileData,\n          id: Date.now().toString(), // 예시로 파일에 대한 고유 ID를 생성\n        },\n      };\n\n      // 200 상태 코드를 통해 성공적으로 처리되었다고 가정\n      if (mockResponse.status === 200) {\n        setSaveStatus(\"success\");\n        console.log(\"File saved (mock):\", mockResponse.data);\n        return mockResponse.data; // 혹은 원하는 데이터 반환\n      } else {\n        setSaveStatus(\"failed\");\n        throw new Error(mockResponse.message);\n      }\n    } catch (error) {\n      setSaveStatus(\"failed\");\n      console.error(\"Error saving the file:\", error);\n      throw error;\n    }\n  };\n\n  const onSaveAs = async (newFileName, currentFilePath, currentFileContent) => {\n    try {\n      const response = await saveAsAPI(\n        \"exampleContainerId\", // TODO: 실제 containerId로 교체\n        selectFileId, // 현재 선택된 파일의 ID\n        currentFilePath,\n        newFileName,\n        currentFileContent,\n      );\n\n      if (response.status === 200) {\n        console.log(\"파일이 성공적으로 복제되었습니다:\", response.data);\n        // 필요하면 여기서 추가적인 상태 업데이트 또는 로직 수행\n      } else {\n        throw new Error(response.message);\n      }\n    } catch (error) {\n      console.error(\"다른 이름으로 파일 저장 실패:\", error.message);\n      if (error.response) {\n        switch (error.response.status) {\n          case 400:\n            alert(\"파라미터 필수 항목이 누락되었거나 형식이 잘못되었습니다.\");\n            break;\n          case 403:\n            alert(\"해당 파일을 변경할 권한이 없습니다.\");\n            break;\n          case 404:\n            alert(\n              \"원본 파일을 찾을 수 없어 다른 이름으로 파일 저장이 불가능 합니다.\",\n            );\n            break;\n          case 409:\n            alert(\"동일한 이름의 파일이 이미 해당 경로에 존재합니다.\");\n            break;\n          case 500:\n          default:\n            alert(\"요청을 처리하는 중에 서버에서 오류가 발생했습니다.\");\n            break;\n        }\n      }\n    }\n  };\n\n  // axios.post 를 이용한 모킹데이터\n  // try {\n  //   // 모킹 데이터 (실제 백엔드 연결 시 해당 URL을 사용)\n  //   const API_URL = \"/api/saveFile\"; // 가상의 API endpoint\n  //   const response = await axios.post(API_URL, fileData);\n\n  //   // 만약 실제로 백엔드와 연동한다면, 백엔드의 응답 형식에 따라 아래 코드를 조정해야 합니다.\n  //   if (response.status === 200) {\n  //     setSaveStatus(\"success\");\n  //     return response.data; // 혹은 원하는 데이터 반환\n  //   } else {\n  //     setSaveStatus(\"failed\");\n  //     throw new Error(response.data.message);\n  //   }\n  // } catch (error) {\n  //   setSaveStatus(\"failed\");\n  //   console.error(\"Error saving the file:\", error);\n  //   throw error;\n  // }\n\n  const editFolderNameMutation = useMutation(updateFolderNameAPI, {\n    onError: (error) => {\n      console.error(\"폴더 이름 수정 에러:\", error);\n    },\n    onSuccess: (data) => {\n      console.log(\"폴더 이름 수정 성공:\", data.message);\n      // 리덕스 상태 업데이트 로직 추가 TODO\n    },\n  });\n\n  const editFolderName = (newName) => {\n    editFolderNameMutation.mutate({\n      newFolderName: newName,\n    });\n  };\n\n  const editFileName = (fileId, newName) => {\n    editFileNameMutation.mutate({\n      fileId,\n      newName,\n      // 다른 필요한 인자들 추가...TODO\n    });\n  };\n\n  const editFileNameMutation = useMutation(editFileNameAPI, {\n    onError: (error) => {\n      console.error(\"파일 이름 수정 에러:\", error);\n    },\n    onSuccess: (data) => {\n      console.log(\"파일 이름 수정 성공:\", data);\n      // 필요한 경우, 리덕스나 로컬 상태 업데이트 로직 추가 TODO\n    },\n  });\n\n  /////////////////delete 관련\n  const deleteFolderMutation = useMutation(deleteFolderAPI, {\n    onError: (error) => {\n      console.error(\"폴더 삭제 에러:\", error);\n    },\n    onSuccess: (data) => {\n      console.log(\"폴더 삭제 성공:\", data.message);\n      // 리덕스나 로컬 상태 업데이트 로직 추가 TODO\n    },\n  });\n\n  const deleteFolder = (folderId) => {\n    deleteFolderMutation.mutate(folderId);\n  };\n\n  const deleteFileMutation = useMutation(deleteFileAPI, {\n    onError: (error) => {\n      switch (error.message) {\n        case \"파라미터 필수 항목이 누락되었거나 형식이 잘못되었습니다.\":\n          console.error(\"파일 삭제 에러: 잘못된 파라미터\");\n          break;\n        case \"해당 파일을 삭제할 권한이 없습니다.\":\n          console.error(\"파일 삭제 권한이 없습니다.\");\n          break;\n        case \"지정된 경로에 해당하는 파일이 존재하지 않습니다.\":\n          console.error(\"파일 삭제 에러: 파일을 찾을 수 없습니다.\");\n          break;\n        default:\n          console.error(\"파일 삭제 중 알 수 없는 오류가 발생했습니다.\", error);\n          break;\n      }\n    },\n    onSuccess: (data) => {\n      console.log(\"파일 삭제 성공:\", data.message);\n      //리덕스 상태 업데이트 로직 추가 TODO\n    },\n  });\n\n  const deleteFile = (fileId, path, fileName) => {\n    deleteFileMutation.mutate({\n      containerId: \"exampleContainerId\", // TODO: 실제 containerId로 교체\n      fileId,\n      path,\n      fileName,\n    });\n  };\n\n  return {\n    createFile,\n    createFolder,\n    selectFileId,\n    saveFile,\n    saveStatus,\n    onSaveAs,\n    editFileName,\n    editFolderName,\n    deleteFolder,\n    deleteFile,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}