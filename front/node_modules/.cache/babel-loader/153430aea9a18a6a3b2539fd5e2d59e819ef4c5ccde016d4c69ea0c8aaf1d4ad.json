{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";// Redux 슬라이스 생성\nvar authSlice=createSlice({name:\"auth\",initialState:{registeredUsers:[],// 회원가입 정보를 저장할 배열\nemail:\"\",// 사용자 이름\npassword:\"\",// 비밀번호\nconfirmPassword:\"\",// 비밀번호 확인\nname:\"\",// 이름\nerror:\"\",// 에러 메시지\nisValidemail:true,// 유효한 사용자 이름 여부\nisValidPassword:true,// 유효한 비밀번호 여부\nisLoading:false,// 로딩 중 여부\nisError:false,// 에러 발생 여부\nisSuccess:false,// 성공 여부\nusername:\"\"},reducers:{// 사용자 등록 정보를 배열에 추가\nregisterUser:function registerUser(state,action){state.registeredUsers.push(action.payload);console.log(state);},// 사용자 이름 업데이트\nsetEmail:function setEmail(state,action){state.email=action.payload;console.log(state);},// 사용자 이름 업데이트\nsetUsername:function setUsername(state,action){state.username=action.payload;console.log(state);},// 비밀번호 업데이트\nsetPassword:function setPassword(state,action){state.password=action.payload;},// 비밀번호 확인 업데이트\nsetConfirmPassword:function setConfirmPassword(state,action){state.confirmPassword=action.payload;},// 이름 업데이트\nsetName:function setName(state,action){state.name=action.payload;console.log(state);},// 에러 메시지 업데이트\nsetError:function setError(state,action){state.error=action.payload;},// 유효한 사용자 이름 여부 업데이트\nsetIsValidUsername:function setIsValidUsername(state,action){state.isValidUsername=action.payload;},// 유효한 비밀번호 여부 업데이트\nsetIsValidPassword:function setIsValidPassword(state,action){state.isValidPassword=action.payload;},// 로딩 중 여부 업데이트\nsetIsLoading:function setIsLoading(state,action){state.isLoading=action.payload;},// 에러 발생 여부 업데이트\nsetIsError:function setIsError(state,action){state.isError=action.payload;},// 성공 여부 업데이트\nsetIsSuccess:function setIsSuccess(state,action){state.isSuccess=action.payload;},// 성공 메시지 업데이트\nsetSuccess:function setSuccess(state,action){state.isSuccess=action.payload;},// 사용자 데이터 초기화\nclearUserData:function clearUserData(state){// clearUserData 액션을 추가합니다.\nstate.email=\"\";state.password=\"\";state.confirmPassword=\"\";state.name=\"\";state.error=\"\";state.isValidUsername=true;state.isValidPassword=true;state.isLoading=false;state.isError=false;state.isSuccess=false;state.username=\"\";}}});// 액션 생성자들을 내보내기\nvar _authSlice$actions=authSlice.actions,setEmail=_authSlice$actions.setEmail,setPassword=_authSlice$actions.setPassword,setConfirmPassword=_authSlice$actions.setConfirmPassword,setName=_authSlice$actions.setName,setError=_authSlice$actions.setError,setIsValidUsername=_authSlice$actions.setIsValidUsername,setIsValidPassword=_authSlice$actions.setIsValidPassword,setIsLoading=_authSlice$actions.setIsLoading,setIsError=_authSlice$actions.setIsError,setIsSuccess=_authSlice$actions.setIsSuccess,registerUser=_authSlice$actions.registerUser,setSuccess=_authSlice$actions.setSuccess,clearUserData=_authSlice$actions.clearUserData,setUsername=_authSlice$actions.setUsername;// 리듀서를 내보내기\nexport{setEmail,setPassword,setConfirmPassword,setName,setError,setIsValidUsername,setIsValidPassword,setIsLoading,setIsError,setIsSuccess,registerUser,setSuccess,clearUserData,setUsername};export default authSlice.reducer;","map":{"version":3,"names":["createSlice","authSlice","name","initialState","registeredUsers","email","password","confirmPassword","error","isValidemail","isValidPassword","isLoading","isError","isSuccess","username","reducers","registerUser","state","action","push","payload","console","log","setEmail","setUsername","setPassword","setConfirmPassword","setName","setError","setIsValidUsername","isValidUsername","setIsValidPassword","setIsLoading","setIsError","setIsSuccess","setSuccess","clearUserData","_authSlice$actions","actions","reducer"],"sources":["/Users/seongsuk/SSAP-IDE-FrontEnd/front/src/redux/authSlice.jsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// Redux 슬라이스 생성\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    registeredUsers: [], // 회원가입 정보를 저장할 배열\n    email: \"\", // 사용자 이름\n    password: \"\", // 비밀번호\n    confirmPassword: \"\", // 비밀번호 확인\n    name: \"\", // 이름\n    error: \"\", // 에러 메시지\n    isValidemail: true, // 유효한 사용자 이름 여부\n    isValidPassword: true, // 유효한 비밀번호 여부\n    isLoading: false, // 로딩 중 여부\n    isError: false, // 에러 발생 여부\n    isSuccess: false, // 성공 여부\n    username: \"\",\n  },\n  reducers: {\n    // 사용자 등록 정보를 배열에 추가\n    registerUser: (state, action) => {\n      state.registeredUsers.push(action.payload);\n      console.log(state);\n    },\n    // 사용자 이름 업데이트\n    setEmail: (state, action) => {\n      state.email = action.payload;\n      console.log(state);\n    },\n    // 사용자 이름 업데이트\n    setUsername: (state, action) => {\n      state.username = action.payload;\n      console.log(state);\n    },\n    // 비밀번호 업데이트\n    setPassword: (state, action) => {\n      state.password = action.payload;\n    },\n    // 비밀번호 확인 업데이트\n    setConfirmPassword: (state, action) => {\n      state.confirmPassword = action.payload;\n    },\n    // 이름 업데이트\n    setName: (state, action) => {\n      state.name = action.payload;\n      console.log(state);\n    },\n    // 에러 메시지 업데이트\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    // 유효한 사용자 이름 여부 업데이트\n    setIsValidUsername: (state, action) => {\n      state.isValidUsername = action.payload;\n    },\n    // 유효한 비밀번호 여부 업데이트\n    setIsValidPassword: (state, action) => {\n      state.isValidPassword = action.payload;\n    },\n    // 로딩 중 여부 업데이트\n    setIsLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n    // 에러 발생 여부 업데이트\n    setIsError: (state, action) => {\n      state.isError = action.payload;\n    },\n    // 성공 여부 업데이트\n    setIsSuccess: (state, action) => {\n      state.isSuccess = action.payload;\n    },\n    // 성공 메시지 업데이트\n    setSuccess: (state, action) => {\n      state.isSuccess = action.payload;\n    },\n    // 사용자 데이터 초기화\n    clearUserData: (state) => {\n      // clearUserData 액션을 추가합니다.\n      state.email = \"\";\n      state.password = \"\";\n      state.confirmPassword = \"\";\n      state.name = \"\";\n      state.error = \"\";\n      state.isValidUsername = true;\n      state.isValidPassword = true;\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.username = \"\";\n    },\n  },\n});\n\n// 액션 생성자들을 내보내기\nexport const {\n  setEmail,\n  setPassword,\n  setConfirmPassword,\n  setName,\n  setError,\n  setIsValidUsername,\n  setIsValidPassword,\n  setIsLoading,\n  setIsError,\n  setIsSuccess,\n  registerUser,\n  setSuccess,\n  clearUserData,\n  setUsername,\n} = authSlice.actions;\n\n// 리듀서를 내보내기\nexport default authSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}