{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// Redux 슬라이스 생성\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    registeredUsers: [],\n    // 회원가입 정보를 저장할 배열\n    email: \"\",\n    // 사용자 이름\n    password: \"\",\n    // 비밀번호\n    confirmPassword: \"\",\n    // 비밀번호 확인\n    name: \"\",\n    // 이름\n    error: \"\",\n    // 에러 메시지\n    isValidemail: true,\n    // 유효한 사용자 이름 여부\n    isValidPassword: true,\n    // 유효한 비밀번호 여부\n    isLoading: false,\n    // 로딩 중 여부\n    isError: false,\n    // 에러 발생 여부\n    isSuccess: false,\n    // 성공 여부\n    username: \"\"\n  },\n  reducers: {\n    // 사용자 등록 정보를 배열에 추가\n    registerUser: (state, action) => {\n      state.registeredUsers.push(action.payload);\n      console.log(state);\n    },\n    // 사용자 이름 업데이트\n    setEmail: (state, action) => {\n      state.email = action.payload;\n      console.log(state);\n    },\n    // 사용자 이름 업데이트\n    setUsername: (state, action) => {\n      state.username = action.payload;\n    },\n    // 비밀번호 업데이트\n    setPassword: (state, action) => {\n      state.password = action.payload;\n    },\n    // 비밀번호 확인 업데이트\n    setConfirmPassword: (state, action) => {\n      state.confirmPassword = action.payload;\n    },\n    // 이름 업데이트\n    setName: (state, action) => {\n      state.name = action.payload;\n    },\n    // 에러 메시지 업데이트\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    // 유효한 사용자 이름 여부 업데이트\n    setIsValidUsername: (state, action) => {\n      state.isValidUsername = action.payload;\n    },\n    // 유효한 비밀번호 여부 업데이트\n    setIsValidPassword: (state, action) => {\n      state.isValidPassword = action.payload;\n    },\n    // 로딩 중 여부 업데이트\n    setIsLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n    // 에러 발생 여부 업데이트\n    setIsError: (state, action) => {\n      state.isError = action.payload;\n    },\n    // 성공 여부 업데이트\n    setIsSuccess: (state, action) => {\n      state.isSuccess = action.payload;\n    },\n    // 성공 메시지 업데이트\n    setSuccess: (state, action) => {\n      state.isSuccess = action.payload;\n    },\n    // 사용자 데이터 초기화\n    clearUserData: state => {\n      // clearUserData 액션을 추가합니다.\n      state.email = \"\";\n      state.password = \"\";\n      state.confirmPassword = \"\";\n      state.name = \"\";\n      state.error = \"\";\n      state.isValidUsername = true;\n      state.isValidPassword = true;\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.username = \"\";\n    }\n  }\n});\n\n// 액션 생성자들을 내보내기\nexport const {\n  setEmail,\n  setPassword,\n  setConfirmPassword,\n  setName,\n  setError,\n  setIsValidUsername,\n  setIsValidPassword,\n  setIsLoading,\n  setIsError,\n  setIsSuccess,\n  registerUser,\n  setSuccess,\n  clearUserData,\n  setUsername\n} = authSlice.actions;\n\n// 리듀서를 내보내기\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","authSlice","name","initialState","registeredUsers","email","password","confirmPassword","error","isValidemail","isValidPassword","isLoading","isError","isSuccess","username","reducers","registerUser","state","action","push","payload","console","log","setEmail","setUsername","setPassword","setConfirmPassword","setName","setError","setIsValidUsername","isValidUsername","setIsValidPassword","setIsLoading","setIsError","setIsSuccess","setSuccess","clearUserData","actions","reducer"],"sources":["/Users/seongsuk/SSAP-IDE-FrontEnd/front/src/redux/authSlice.jsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// Redux 슬라이스 생성\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    registeredUsers: [], // 회원가입 정보를 저장할 배열\n    email: \"\", // 사용자 이름\n    password: \"\", // 비밀번호\n    confirmPassword: \"\", // 비밀번호 확인\n    name: \"\", // 이름\n    error: \"\", // 에러 메시지\n    isValidemail: true, // 유효한 사용자 이름 여부\n    isValidPassword: true, // 유효한 비밀번호 여부\n    isLoading: false, // 로딩 중 여부\n    isError: false, // 에러 발생 여부\n    isSuccess: false, // 성공 여부\n    username: \"\",\n  },\n  reducers: {\n    // 사용자 등록 정보를 배열에 추가\n    registerUser: (state, action) => {\n      state.registeredUsers.push(action.payload);\n      console.log(state);\n    },\n    // 사용자 이름 업데이트\n    setEmail: (state, action) => {\n      state.email = action.payload;\n      console.log(state);\n    },\n    // 사용자 이름 업데이트\n    setUsername: (state, action) => {\n      state.username = action.payload;\n    },\n    // 비밀번호 업데이트\n    setPassword: (state, action) => {\n      state.password = action.payload;\n    },\n    // 비밀번호 확인 업데이트\n    setConfirmPassword: (state, action) => {\n      state.confirmPassword = action.payload;\n    },\n    // 이름 업데이트\n    setName: (state, action) => {\n      state.name = action.payload;\n    },\n    // 에러 메시지 업데이트\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    // 유효한 사용자 이름 여부 업데이트\n    setIsValidUsername: (state, action) => {\n      state.isValidUsername = action.payload;\n    },\n    // 유효한 비밀번호 여부 업데이트\n    setIsValidPassword: (state, action) => {\n      state.isValidPassword = action.payload;\n    },\n    // 로딩 중 여부 업데이트\n    setIsLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n    // 에러 발생 여부 업데이트\n    setIsError: (state, action) => {\n      state.isError = action.payload;\n    },\n    // 성공 여부 업데이트\n    setIsSuccess: (state, action) => {\n      state.isSuccess = action.payload;\n    },\n    // 성공 메시지 업데이트\n    setSuccess: (state, action) => {\n      state.isSuccess = action.payload;\n    },\n    // 사용자 데이터 초기화\n    clearUserData: (state) => {\n      // clearUserData 액션을 추가합니다.\n      state.email = \"\";\n      state.password = \"\";\n      state.confirmPassword = \"\";\n      state.name = \"\";\n      state.error = \"\";\n      state.isValidUsername = true;\n      state.isValidPassword = true;\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.username = \"\";\n    },\n  },\n});\n\n// 액션 생성자들을 내보내기\nexport const {\n  setEmail,\n  setPassword,\n  setConfirmPassword,\n  setName,\n  setError,\n  setIsValidUsername,\n  setIsValidPassword,\n  setIsLoading,\n  setIsError,\n  setIsSuccess,\n  registerUser,\n  setSuccess,\n  clearUserData,\n  setUsername,\n} = authSlice.actions;\n\n// 리듀서를 내보내기\nexport default authSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}