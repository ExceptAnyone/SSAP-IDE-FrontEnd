{"ast":null,"code":"var _jsxFileName = \"/Users/seongsuk/SSAP-IDE-FrontEnd/front/src/page/main/MainPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Test from \"./Test\";\nimport Header from \"../../components/header/Header\";\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport \"./MainPage.css\";\nimport Footer from \"../../components/footer/Footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MainPage() {\n  _s();\n  const password = props.password;\n  const confirmPassword = props.confirmPassword;\n  const containnername = props.containnername;\n  const MainPage = props.MainPage;\n  const handleSubmit = props.handleSubmit;\n  const updateContainer = props.updateContainer;\n  const handleEditButtonClick = props.handleEditButtonClick;\n  const description = props.description;\n  const [originalPosts, setOriginalPosts] = useState([]); // 초기 글 목록을 저장하는 상태 변수\n  const [posts, setPosts] = useState([]); // 글 목록을 상태로 관리\n  const addPost = post => {\n    const updatedPosts = [...posts, post];\n    setPosts(updatedPosts);\n\n    // 로컬 스토리지에 데이터 저장\n    localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\n  };\n  useEffect(() => {\n    // 페이지가 로드될 때 로컬 스토리지에서 데이터를 읽어옴\n    const storedPosts = JSON.parse(localStorage.getItem(\"posts\")) || [];\n    setPosts(storedPosts);\n  }, []);\n  const deletePost = index => {\n    // 해당 인덱스의 글을 삭제\n    const updatedPosts = [...posts];\n    updatedPosts.splice(index, 1);\n    setPosts(updatedPosts);\n\n    // 로컬 스토리지에 데이터 저장\n    localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\n  };\n  const editPost = (index, updatedPost) => {\n    // 해당 인덱스의 글을 수정\n    const updatedPosts = [...posts];\n    updatedPosts[index] = updatedPost;\n    setPosts(updatedPosts);\n\n    // 로컬 스토리지에 데이터 저장\n    localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\n  };\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const handleSearch = e => {\n    const searchText = e.target.value.toLowerCase(); // 검색어를 소문자로 통일\n    setSearchTerm(searchText);\n    if (searchText === \"\") {\n      // 검색어가 비어있을 때, 초기 글 목록을 보여줍니다.\n      setPosts(originalPosts);\n    } else {\n      // 검색어에 해당하는 게시물만 필터링하여 업데이트합니다.\n      const filteredPosts = originalPosts.filter(post => post.title.toLowerCase().includes(searchText) // 게시물의 title도 소문자로 통일하여 비교\n      );\n\n      setPosts(filteredPosts);\n    }\n  };\n  useEffect(() => {\n    // 페이지가 로드될 때 로컬 스토리지에서 데이터를 읽어와 originalPosts 상태에 설정합니다.\n    const storedPosts = JSON.parse(localStorage.getItem(\"posts\")) || [];\n    setPosts(storedPosts);\n    setOriginalPosts(storedPosts); // 초기 글 목록을 설정합니다.\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-inner\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        link: \"/containers\",\n        name: \"\\uC0C8 \\uCEE8\\uD14C\\uC774\\uB108\",\n        icon: \"\\uBAA8\\uB4E0 \\uCEE8\\uD14C\\uC774\\uB108\",\n        MainPage: MainPage,\n        addPost: addPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-hd\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          children: /*#__PURE__*/_jsxDEV(AiOutlineSearch, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"search\",\n          type: \"text\",\n          placeholder: \"\\uCEE8\\uD14C\\uC774\\uB108 \\uC774\\uB984\",\n          onChange: handleSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        style: {\n          textDecoration: \"none\"\n        },\n        to: props.link,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"edit-btn\",\n          disabled: password !== confirmPassword || !password && !containnername && !MainPage && !description,\n          onClick: updateContainer || handleSubmit || handleEditButtonClick || handleEditButtonClick,\n          children: props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-list\",\n        children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(Test, {\n          posts: [post],\n          deletePost: deletePost\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(MainPage, \"yeYuzdW/QLvXw8uZX6/j8vvr5zA=\");\n_c = MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","Test","Header","AiOutlineSearch","Footer","jsxDEV","_jsxDEV","MainPage","_s","password","props","confirmPassword","containnername","handleSubmit","updateContainer","handleEditButtonClick","description","originalPosts","setOriginalPosts","posts","setPosts","addPost","post","updatedPosts","localStorage","setItem","JSON","stringify","storedPosts","parse","getItem","deletePost","index","splice","editPost","updatedPost","searchTerm","setSearchTerm","handleSearch","e","searchText","target","value","toLowerCase","filteredPosts","filter","title","includes","className","children","link","name","icon","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","Link","style","textDecoration","to","disabled","onClick","map","_c","$RefreshReg$"],"sources":["/Users/seongsuk/SSAP-IDE-FrontEnd/front/src/page/main/MainPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Test from \"./Test\";\nimport Header from \"../../components/header/Header\";\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport \"./MainPage.css\";\nimport Footer from \"../../components/footer/Footer\";\n\nexport default function MainPage() {\n  const password = props.password;\n  const confirmPassword = props.confirmPassword;\n  const containnername = props.containnername;\n  const MainPage = props.MainPage;\n  const handleSubmit = props.handleSubmit;\n  const updateContainer = props.updateContainer;\n  const handleEditButtonClick = props.handleEditButtonClick;\n  const description = props.description;\n  const [originalPosts, setOriginalPosts] = useState([]); // 초기 글 목록을 저장하는 상태 변수\n  const [posts, setPosts] = useState([]); // 글 목록을 상태로 관리\n  const addPost = (post) => {\n    const updatedPosts = [...posts, post];\n    setPosts(updatedPosts);\n\n    // 로컬 스토리지에 데이터 저장\n    localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\n  };\n  useEffect(() => {\n    // 페이지가 로드될 때 로컬 스토리지에서 데이터를 읽어옴\n    const storedPosts = JSON.parse(localStorage.getItem(\"posts\")) || [];\n    setPosts(storedPosts);\n  }, []);\n\n  const deletePost = (index) => {\n    // 해당 인덱스의 글을 삭제\n    const updatedPosts = [...posts];\n    updatedPosts.splice(index, 1);\n    setPosts(updatedPosts);\n\n    // 로컬 스토리지에 데이터 저장\n    localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\n  };\n\n  const editPost = (index, updatedPost) => {\n    // 해당 인덱스의 글을 수정\n    const updatedPosts = [...posts];\n    updatedPosts[index] = updatedPost;\n    setPosts(updatedPosts);\n\n    // 로컬 스토리지에 데이터 저장\n    localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\n  };\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const handleSearch = (e) => {\n    const searchText = e.target.value.toLowerCase(); // 검색어를 소문자로 통일\n    setSearchTerm(searchText);\n\n    if (searchText === \"\") {\n      // 검색어가 비어있을 때, 초기 글 목록을 보여줍니다.\n      setPosts(originalPosts);\n    } else {\n      // 검색어에 해당하는 게시물만 필터링하여 업데이트합니다.\n      const filteredPosts = originalPosts.filter(\n        (post) => post.title.toLowerCase().includes(searchText), // 게시물의 title도 소문자로 통일하여 비교\n      );\n      setPosts(filteredPosts);\n    }\n  };\n\n  useEffect(() => {\n    // 페이지가 로드될 때 로컬 스토리지에서 데이터를 읽어와 originalPosts 상태에 설정합니다.\n    const storedPosts = JSON.parse(localStorage.getItem(\"posts\")) || [];\n    setPosts(storedPosts);\n    setOriginalPosts(storedPosts); // 초기 글 목록을 설정합니다.\n  }, []);\n\n  return (\n    <div className=\"main\">\n      <div className=\"main-inner\">\n        <Header\n          link=\"/containers\"\n          name=\"새 컨테이너\"\n          icon=\"모든 컨테이너\"\n          MainPage={MainPage}\n          addPost={addPost}\n        />\n        <div className=\"login-hd\">\n          <button>\n            <AiOutlineSearch />\n          </button>\n          <input\n            className=\"search\"\n            type=\"text\"\n            placeholder=\"컨테이너 이름\"\n            onChange={handleSearch}\n          ></input>\n        </div>\n        <Link style={{ textDecoration: \"none\" }} to={props.link}>\n            <button\n              className=\"edit-btn\"\n              disabled={\n                password !== confirmPassword ||\n                (!password && !containnername && !MainPage && !description)\n              }\n              onClick={\n                updateContainer ||\n                handleSubmit ||\n                handleEditButtonClick ||\n                handleEditButtonClick\n              }\n            >\n              {props.name}\n            </button>\n          </Link>\n        <div className=\"test-list\">\n          {posts.map((post, index) => (\n            <Test key={index} posts={[post]} deletePost={deletePost} />\n          ))}\n        </div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}