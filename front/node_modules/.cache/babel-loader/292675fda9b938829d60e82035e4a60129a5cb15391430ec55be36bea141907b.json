{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nvar _previews = /*#__PURE__*/new WeakMap();\nexport class PreviewListImpl {\n  /*private*/\n  constructor() {\n    _classPrivateFieldInitSpec(this, _previews, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"register\", preview => {\n      _classPrivateFieldGet(this, _previews).push(preview);\n    });\n    _defineProperty(this, \"unregister\", preview => {\n      let index;\n      while ((index = _classPrivateFieldGet(this, _previews).indexOf(preview)) !== -1) {\n        _classPrivateFieldGet(this, _previews).splice(index, 1);\n      }\n    });\n    _defineProperty(this, \"backendChanged\", backend => {\n      for (const preview of _classPrivateFieldGet(this, _previews)) {\n        preview.backendChanged(backend);\n      }\n    });\n    _classPrivateFieldSet(this, _previews, []);\n  }\n}","map":{"version":3,"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_classPrivateFieldInitSpec","privateMap","_checkPrivateRedeclaration","set","privateCollection","has","TypeError","_classPrivateFieldGet","receiver","descriptor","_classExtractFieldDescriptor","_classApplyDescriptorGet","get","call","_classPrivateFieldSet","_classApplyDescriptorSet","action","_previews","WeakMap","PreviewListImpl","constructor","preview","push","index","indexOf","splice","backend","backendChanged"],"sources":["/Users/seongsuk/SSAP-IDE-FrontEnd/front/node_modules/dnd-multi-backend/dist/esm/PreviewListImpl.js"],"sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\nvar _previews = /*#__PURE__*/new WeakMap();\n\nexport class PreviewListImpl {\n  /*private*/\n  constructor() {\n    _classPrivateFieldInitSpec(this, _previews, {\n      writable: true,\n      value: void 0\n    });\n\n    _defineProperty(this, \"register\", preview => {\n      _classPrivateFieldGet(this, _previews).push(preview);\n    });\n\n    _defineProperty(this, \"unregister\", preview => {\n      let index;\n\n      while ((index = _classPrivateFieldGet(this, _previews).indexOf(preview)) !== -1) {\n        _classPrivateFieldGet(this, _previews).splice(index, 1);\n      }\n    });\n\n    _defineProperty(this, \"backendChanged\", backend => {\n      for (const preview of _classPrivateFieldGet(this, _previews)) {\n        preview.backendChanged(backend);\n      }\n    });\n\n    _classPrivateFieldSet(this, _previews, []);\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}