{"ast":null,"code":"import _regeneratorRuntime from\"/Users/seongsuk/SSAP-IDE-FrontEnd/front/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _objectSpread from\"/Users/seongsuk/SSAP-IDE-FrontEnd/front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/Users/seongsuk/SSAP-IDE-FrontEnd/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _toConsumableArray from\"/Users/seongsuk/SSAP-IDE-FrontEnd/front/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/seongsuk/SSAP-IDE-FrontEnd/front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{addFile,addFolder}from\"../../../fileSlice/FileSlice\";import axios from\"axios\";import{useMutation}from\"react-query\";import{createFileAPI}from\"../../../../../api/ideAPI/createFileAPI\";import{saveAsAPI}from\"../../../../../api/ideAPI/saveAsAPI\";import{createFolderAPI}from\"../../../../../api/ideAPI/createFolderAPI\";import{saveFileAPI}from\"../../../../../api/ideAPI/saveFileAPI\";import{editFileNameAPI}from\"../../../../../api/ideAPI/editFileNameAPI\";import{updateFolderNameAPI}from\"../../../../../api/ideAPI/folderEditAPI\";import{deleteFolderAPI}from\"../../../../../api/ideAPI/deleteFolderAPI\";import{deleteFileAPI}from\"../../../../../api/ideAPI/deleteFileAPI\";export default function useFileAction(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),files=_useState2[0],setFiles=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),folders=_useState4[0],setFolders=_useState4[1];var selectFileId=useSelector(function(state){return state.file.selectFileId;});var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),saveStatus=_useState6[0],setSaveStatus=_useState6[1];var dispatch=useDispatch();var fileData=useSelector(function(state){return state.file.data;});// const createFileMutation = useMutation(createFileAPI, {\n//   onError: (error) => {\n//     console.error(\"파일 생성 에러:\", error);\n//   },\n//   onSuccess: (data) => {\n//     console.log(\"새 파일 생성 성공:\", data);\n//     // 리덕스나 로컬 상태 업데이트 로직 추가\n//     const newFileData = {\n//       id: Date.now().toString(),\n//       parent: selectFileId || 0,\n//       droppable: false,\n//       text: data.fileName,\n//       // data: {\n//       //   fileType: \"text\", // 기본 파일 타입 \"text\" TODO\n//       //   path: data.Path,\n//       // },\n//     };\n//     dispatch(addFile(newFileData));\n//   },\n// });\n// const createFile = (parentFileId, name, type, ext, path, content) => {\n//   createFileMutation.mutate({\n//     containerId: \"exampleContainerId\", // TODO: 실제 containerId로 교체\n//     parentFileId,\n//     name,\n//     type,\n//     ext,\n//     path,\n//     content,\n//   });\n// };\n// TODO 모킹데이터를 이용한 새 파일 생성\nvar createFile=function createFile(){// 모킹 데이터 TODO\nvar mockResponse={status:201,message:\"파일 생성\",data:{Path:\"/example/path\",fileName:\"NewFile\"}};var newFileData={id:Date.now().toString(),// 유니크한 ID 생성 (실제로는 다른 방식으로 생성해야 함)\nparent:selectFileId||0,// 선택된 폴더가 있으면 그 폴더에 추가, 없으면 최상위에 추가\ndroppable:false,text:\"New File\",data:{fileType:\"text\"// TODO 기본 파일 타입 \"text\"\n}};console.log(\"newFileData\",newFileData);dispatch(addFile(newFileData));if(mockResponse.status===201){// 폴더 생성 성공시 화면에 폴더 추가\nsetFiles(function(prevFiles){var newFiles=[].concat(_toConsumableArray(prevFiles),[{path:mockResponse.data.Path,fileName:mockResponse.data.fileName}]);console.log(\"Updated file:\",newFiles);// TODO 추후 삭제\nreturn newFiles;});}else{// 다른 상태 코드에 따른 처리 로직\nalert(mockResponse.message);}};// const createFolderMutation = useMutation(createFolderAPI, {\n//   onError: (error) => {\n//     console.error(\"폴더 생성 에러:\", error);\n//   },\n//   onSuccess: (data) => {\n//     console.log(\"새 폴더 생성 성공:\", data);\n//     console.log(\"selectFileId\", selectFileId);\n//     console.log(\"fileData\", fileData);\n//     // 리덕스나 로컬 상태 업데이트 로직 추가\n//     const newFolderData = {\n//       id: 1,\n//       parent: selectFileId || 0,\n//       droppable: true,\n//       text: \"newFolder\",\n//       // data: {\n//       //   fileType: \"folder\", // 폴더 타입 지정\n//       //   path: data.Path,\n//       // },\n//     };\n//     console.log(\"selectFileId\", selectFileId);\n//     console.log(\"fileData\", fileData);\n//     dispatch(addFolder(newFolderData));\n//     console.log(\"selectFileId\", selectFileId);\n//     console.log(\"fileData\", fileData);\n//     console.log(\"newFolderData\", newFolderData);\n//   },\n// });\n// const createFolder = (path, folderName) => {\n//   console.log(\"folderName\", folderName);\n//   console.log(\"parentId\", selectFileId);\n//   createFolderMutation.mutate({\n//     parentFolderId: selectFileId || 0, // 선택된 파일 or 폴더의 ID\n//     name: \"newFolder\",\n//     type: false, // 폴더 타입 지정\n//     path: \"/hello/hello2\",\n//   });\n// };\nvar createFolder=function createFolder(){//폴더 생성 모킹 데이터 TODO 추후 삭제\nvar mockCreateFolderResponse={status:201,message:\"폴더 생성 성공\",data:{id:Date.now().toString(),// 유니크한 폴더 ID\nname:\"newFolder\",path:\"/current/path/newFolder\",created_at:\"2023-09-27T12:00:00Z\"}};// mockCreateFolderResponse를 사용하여 폴더 생성 로직을 시뮬레이션\nvar response=mockCreateFolderResponse;if(response.status===201){var newFolderData={id:response.data.id,parent:selectFileId||0,droppable:true,text:response.data.name,// 여기에 폴더의 이름을 지정\ntype:\"folder\"};dispatch(addFolder(newFolderData));// 리덕스 스토어 업데이트\n}else{alert(response.message);}};// const saveFileMutation = useMutation(saveFileAPI, {\n//   onError: (error) => {\n//     console.error(\"파일 저장 에러:\", error);\n//   },\n//   onSuccess: (data) => {\n//     console.log(\"파일 저장 성공:\", data);\n//     setSaveStatus(\"success\");\n//   },\n//   onMutate: () => {\n//     setSaveStatus(\"pending\");\n//   },\n// });\n// const saveFile = (fileId, path, fileName, content) => {\n//   saveFileMutation.mutate({\n//     containerId: \"exampleContainerId\", // TODO: 실제 containerId로 교체\n//     fileId,\n//     path,\n//     fileName,\n//     content,\n//   });\n// };\nvar saveFile=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(fileData){var mockResponse;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;// 가상의 모킹 데이터로 응답 TODO\nmockResponse={status:200,message:\"File saved successfully!\",data:_objectSpread(_objectSpread({},fileData),{},{id:Date.now().toString()// 예시로 파일에 대한 고유 ID를 생성\n})};// 200 상태 코드를 통해 성공적으로 처리되었다고 가정\nif(!(mockResponse.status===200)){_context.next=8;break;}setSaveStatus(\"success\");console.log(\"File saved (mock):\",mockResponse.data);return _context.abrupt(\"return\",mockResponse.data);case 8:setSaveStatus(\"failed\");throw new Error(mockResponse.message);case 10:_context.next=17;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);setSaveStatus(\"failed\");console.error(\"Error saving the file:\",_context.t0);throw _context.t0;case 17:case\"end\":return _context.stop();}},_callee,null,[[0,12]]);}));return function saveFile(_x){return _ref.apply(this,arguments);};}();var onSaveAs=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(newFileName,currentFilePath,currentFileContent){var response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return saveAsAPI(\"exampleContainerId\",// TODO: 실제 containerId로 교체\nselectFileId,// 현재 선택된 파일의 ID\ncurrentFilePath,newFileName,currentFileContent);case 3:response=_context2.sent;if(!(response.status===200)){_context2.next=8;break;}console.log(\"파일이 성공적으로 복제되었습니다:\",response.data);// 필요하면 여기서 추가적인 상태 업데이트 또는 로직 수행\n_context2.next=9;break;case 8:throw new Error(response.message);case 9:_context2.next=28;break;case 11:_context2.prev=11;_context2.t0=_context2[\"catch\"](0);console.error(\"다른 이름으로 파일 저장 실패:\",_context2.t0.message);if(!_context2.t0.response){_context2.next=28;break;}_context2.t1=_context2.t0.response.status;_context2.next=_context2.t1===400?18:_context2.t1===403?20:_context2.t1===404?22:_context2.t1===409?24:_context2.t1===500?26:26;break;case 18:alert(\"파라미터 필수 항목이 누락되었거나 형식이 잘못되었습니다.\");return _context2.abrupt(\"break\",28);case 20:alert(\"해당 파일을 변경할 권한이 없습니다.\");return _context2.abrupt(\"break\",28);case 22:alert(\"원본 파일을 찾을 수 없어 다른 이름으로 파일 저장이 불가능 합니다.\");return _context2.abrupt(\"break\",28);case 24:alert(\"동일한 이름의 파일이 이미 해당 경로에 존재합니다.\");return _context2.abrupt(\"break\",28);case 26:alert(\"요청을 처리하는 중에 서버에서 오류가 발생했습니다.\");return _context2.abrupt(\"break\",28);case 28:case\"end\":return _context2.stop();}},_callee2,null,[[0,11]]);}));return function onSaveAs(_x2,_x3,_x4){return _ref2.apply(this,arguments);};}();// axios.post 를 이용한 모킹데이터\n// try {\n//   // 모킹 데이터 (실제 백엔드 연결 시 해당 URL을 사용)\n//   const API_URL = \"/api/saveFile\"; // 가상의 API endpoint\n//   const response = await axios.post(API_URL, fileData);\n//   // 만약 실제로 백엔드와 연동한다면, 백엔드의 응답 형식에 따라 아래 코드를 조정해야 합니다.\n//   if (response.status === 200) {\n//     setSaveStatus(\"success\");\n//     return response.data; // 혹은 원하는 데이터 반환\n//   } else {\n//     setSaveStatus(\"failed\");\n//     throw new Error(response.data.message);\n//   }\n// } catch (error) {\n//   setSaveStatus(\"failed\");\n//   console.error(\"Error saving the file:\", error);\n//   throw error;\n// }\nvar editFolderNameMutation=useMutation(updateFolderNameAPI,{onError:function onError(error){console.error(\"폴더 이름 수정 에러:\",error);},onSuccess:function onSuccess(data){console.log(\"폴더 이름 수정 성공:\",data.message);// 리덕스 상태 업데이트 로직 추가 TODO\n}});var editFolderName=function editFolderName(newName){editFolderNameMutation.mutate({newFolderName:newName});};var editFileName=function editFileName(fileId,newName){editFileNameMutation.mutate({fileId:fileId,newName:newName// 다른 필요한 인자들 추가...TODO\n});};var editFileNameMutation=useMutation(editFileNameAPI,{onError:function onError(error){console.error(\"파일 이름 수정 에러:\",error);},onSuccess:function onSuccess(data){console.log(\"파일 이름 수정 성공:\",data);// 필요한 경우, 리덕스나 로컬 상태 업데이트 로직 추가 TODO\n}});/////////////////delete 관련\nvar deleteFolderMutation=useMutation(deleteFolderAPI,{onError:function onError(error){console.error(\"폴더 삭제 에러:\",error);},onSuccess:function onSuccess(data){console.log(\"폴더 삭제 성공:\",data.message);// 리덕스나 로컬 상태 업데이트 로직 추가 TODO\n}});var deleteFolder=function deleteFolder(folderId){deleteFolderMutation.mutate(folderId);};var deleteFileMutation=useMutation(deleteFileAPI,{onError:function onError(error){switch(error.message){case\"파라미터 필수 항목이 누락되었거나 형식이 잘못되었습니다.\":console.error(\"파일 삭제 에러: 잘못된 파라미터\");break;case\"해당 파일을 삭제할 권한이 없습니다.\":console.error(\"파일 삭제 권한이 없습니다.\");break;case\"지정된 경로에 해당하는 파일이 존재하지 않습니다.\":console.error(\"파일 삭제 에러: 파일을 찾을 수 없습니다.\");break;default:console.error(\"파일 삭제 중 알 수 없는 오류가 발생했습니다.\",error);break;}},onSuccess:function onSuccess(data){console.log(\"파일 삭제 성공:\",data.message);//리덕스 상태 업데이트 로직 추가 TODO\n}});var deleteFile=function deleteFile(fileId,path,fileName){deleteFileMutation.mutate({containerId:\"exampleContainerId\",// TODO: 실제 containerId로 교체\nfileId:fileId,path:path,fileName:fileName});};return{createFile:createFile,createFolder:createFolder,selectFileId:selectFileId,saveFile:saveFile,saveStatus:saveStatus,onSaveAs:onSaveAs,editFileName:editFileName,editFolderName:editFolderName,deleteFolder:deleteFolder,deleteFile:deleteFile};}","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","addFile","addFolder","axios","useMutation","createFileAPI","saveAsAPI","createFolderAPI","saveFileAPI","editFileNameAPI","updateFolderNameAPI","deleteFolderAPI","deleteFileAPI","useFileAction","_useState","_useState2","_slicedToArray","files","setFiles","_useState3","_useState4","folders","setFolders","selectFileId","state","file","_useState5","_useState6","saveStatus","setSaveStatus","dispatch","fileData","data","createFile","mockResponse","status","message","Path","fileName","newFileData","id","Date","now","toString","parent","droppable","text","fileType","console","log","prevFiles","newFiles","concat","_toConsumableArray","path","alert","createFolder","mockCreateFolderResponse","name","created_at","response","newFolderData","type","saveFile","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","_objectSpread","abrupt","Error","t0","error","stop","_x","apply","arguments","onSaveAs","_ref2","_callee2","newFileName","currentFilePath","currentFileContent","_callee2$","_context2","sent","t1","_x2","_x3","_x4","editFolderNameMutation","onError","onSuccess","editFolderName","newName","mutate","newFolderName","editFileName","fileId","editFileNameMutation","deleteFolderMutation","deleteFolder","folderId","deleteFileMutation","deleteFile","containerId"],"sources":["/Users/seongsuk/SSAP-IDE-FrontEnd/front/src/components/ide/ideUI/header/file/useFileAction.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addFile, addFolder } from \"../../../fileSlice/FileSlice\";\nimport axios from \"axios\";\nimport { useMutation } from \"react-query\";\nimport { createFileAPI } from \"../../../../../api/ideAPI/createFileAPI\";\nimport { saveAsAPI } from \"../../../../../api/ideAPI/saveAsAPI\";\nimport { createFolderAPI } from \"../../../../../api/ideAPI/createFolderAPI\";\nimport { saveFileAPI } from \"../../../../../api/ideAPI/saveFileAPI\";\nimport { editFileNameAPI } from \"../../../../../api/ideAPI/editFileNameAPI\";\nimport { updateFolderNameAPI } from \"../../../../../api/ideAPI/folderEditAPI\";\nimport { deleteFolderAPI } from \"../../../../../api/ideAPI/deleteFolderAPI\";\nimport { deleteFileAPI } from \"../../../../../api/ideAPI/deleteFileAPI\";\n\nexport default function useFileAction() {\n  const [files, setFiles] = useState([]);\n  const [folders, setFolders] = useState([]);\n  const selectFileId = useSelector((state) => state.file.selectFileId);\n  const [saveStatus, setSaveStatus] = useState(null);\n  const dispatch = useDispatch();\n  const fileData = useSelector((state) => state.file.data);\n\n  // const createFileMutation = useMutation(createFileAPI, {\n  //   onError: (error) => {\n  //     console.error(\"파일 생성 에러:\", error);\n  //   },\n  //   onSuccess: (data) => {\n  //     console.log(\"새 파일 생성 성공:\", data);\n  //     // 리덕스나 로컬 상태 업데이트 로직 추가\n  //     const newFileData = {\n  //       id: Date.now().toString(),\n  //       parent: selectFileId || 0,\n  //       droppable: false,\n  //       text: data.fileName,\n  //       // data: {\n  //       //   fileType: \"text\", // 기본 파일 타입 \"text\" TODO\n  //       //   path: data.Path,\n  //       // },\n  //     };\n  //     dispatch(addFile(newFileData));\n  //   },\n  // });\n\n  // const createFile = (parentFileId, name, type, ext, path, content) => {\n  //   createFileMutation.mutate({\n  //     containerId: \"exampleContainerId\", // TODO: 실제 containerId로 교체\n  //     parentFileId,\n  //     name,\n  //     type,\n  //     ext,\n  //     path,\n  //     content,\n  //   });\n  // };\n\n  // TODO 모킹데이터를 이용한 새 파일 생성\n  const createFile = () => {\n    // 모킹 데이터 TODO\n    const mockResponse = {\n      status: 201,\n      message: \"파일 생성\",\n      data: {\n        Path: \"/example/path\",\n        fileName: \"NewFile\",\n      },\n    };\n\n    const newFileData = {\n      id: Date.now().toString(), // 유니크한 ID 생성 (실제로는 다른 방식으로 생성해야 함)\n      parent: selectFileId || 0, // 선택된 폴더가 있으면 그 폴더에 추가, 없으면 최상위에 추가\n      droppable: false,\n      text: \"New File\",\n      data: {\n        fileType: \"text\", // TODO 기본 파일 타입 \"text\"\n      },\n    };\n    console.log(\"newFileData\", newFileData);\n    dispatch(addFile(newFileData));\n\n    if (mockResponse.status === 201) {\n      // 폴더 생성 성공시 화면에 폴더 추가\n      setFiles((prevFiles) => {\n        const newFiles = [\n          ...prevFiles,\n          {\n            path: mockResponse.data.Path,\n            fileName: mockResponse.data.fileName,\n          },\n        ];\n        console.log(\"Updated file:\", newFiles); // TODO 추후 삭제\n        return newFiles;\n      });\n    } else {\n      // 다른 상태 코드에 따른 처리 로직\n      alert(mockResponse.message);\n    }\n  };\n\n  // const createFolderMutation = useMutation(createFolderAPI, {\n  //   onError: (error) => {\n  //     console.error(\"폴더 생성 에러:\", error);\n  //   },\n  //   onSuccess: (data) => {\n  //     console.log(\"새 폴더 생성 성공:\", data);\n  //     console.log(\"selectFileId\", selectFileId);\n  //     console.log(\"fileData\", fileData);\n  //     // 리덕스나 로컬 상태 업데이트 로직 추가\n  //     const newFolderData = {\n  //       id: 1,\n  //       parent: selectFileId || 0,\n  //       droppable: true,\n  //       text: \"newFolder\",\n\n  //       // data: {\n  //       //   fileType: \"folder\", // 폴더 타입 지정\n  //       //   path: data.Path,\n  //       // },\n  //     };\n  //     console.log(\"selectFileId\", selectFileId);\n  //     console.log(\"fileData\", fileData);\n\n  //     dispatch(addFolder(newFolderData));\n  //     console.log(\"selectFileId\", selectFileId);\n  //     console.log(\"fileData\", fileData);\n  //     console.log(\"newFolderData\", newFolderData);\n  //   },\n  // });\n\n  // const createFolder = (path, folderName) => {\n  //   console.log(\"folderName\", folderName);\n  //   console.log(\"parentId\", selectFileId);\n\n  //   createFolderMutation.mutate({\n  //     parentFolderId: selectFileId || 0, // 선택된 파일 or 폴더의 ID\n  //     name: \"newFolder\",\n  //     type: false, // 폴더 타입 지정\n  //     path: \"/hello/hello2\",\n  //   });\n  // };\n\n  const createFolder = () => {\n    //폴더 생성 모킹 데이터 TODO 추후 삭제\n    const mockCreateFolderResponse = {\n      status: 201,\n      message: \"폴더 생성 성공\",\n      data: {\n        id: Date.now().toString(), // 유니크한 폴더 ID\n        name: \"newFolder\",\n        path: \"/current/path/newFolder\",\n        created_at: \"2023-09-27T12:00:00Z\",\n      },\n    };\n\n    // mockCreateFolderResponse를 사용하여 폴더 생성 로직을 시뮬레이션\n    const response = mockCreateFolderResponse;\n\n    if (response.status === 201) {\n      const newFolderData = {\n        id: response.data.id,\n        parent: selectFileId || 0,\n        droppable: true,\n        text: response.data.name, // 여기에 폴더의 이름을 지정\n        type: \"folder\",\n      };\n      dispatch(addFolder(newFolderData)); // 리덕스 스토어 업데이트\n    } else {\n      alert(response.message);\n    }\n  };\n\n  // const saveFileMutation = useMutation(saveFileAPI, {\n  //   onError: (error) => {\n  //     console.error(\"파일 저장 에러:\", error);\n  //   },\n  //   onSuccess: (data) => {\n  //     console.log(\"파일 저장 성공:\", data);\n  //     setSaveStatus(\"success\");\n  //   },\n  //   onMutate: () => {\n  //     setSaveStatus(\"pending\");\n  //   },\n  // });\n\n  // const saveFile = (fileId, path, fileName, content) => {\n  //   saveFileMutation.mutate({\n  //     containerId: \"exampleContainerId\", // TODO: 실제 containerId로 교체\n  //     fileId,\n  //     path,\n  //     fileName,\n  //     content,\n  //   });\n  // };\n  const saveFile = async (fileData) => {\n    try {\n      // 가상의 모킹 데이터로 응답 TODO\n      const mockResponse = {\n        status: 200,\n        message: \"File saved successfully!\",\n        data: {\n          ...fileData,\n          id: Date.now().toString(), // 예시로 파일에 대한 고유 ID를 생성\n        },\n      };\n\n      // 200 상태 코드를 통해 성공적으로 처리되었다고 가정\n      if (mockResponse.status === 200) {\n        setSaveStatus(\"success\");\n        console.log(\"File saved (mock):\", mockResponse.data);\n        return mockResponse.data; // 혹은 원하는 데이터 반환\n      } else {\n        setSaveStatus(\"failed\");\n        throw new Error(mockResponse.message);\n      }\n    } catch (error) {\n      setSaveStatus(\"failed\");\n      console.error(\"Error saving the file:\", error);\n      throw error;\n    }\n  };\n\n  const onSaveAs = async (newFileName, currentFilePath, currentFileContent) => {\n    try {\n      const response = await saveAsAPI(\n        \"exampleContainerId\", // TODO: 실제 containerId로 교체\n        selectFileId, // 현재 선택된 파일의 ID\n        currentFilePath,\n        newFileName,\n        currentFileContent,\n      );\n\n      if (response.status === 200) {\n        console.log(\"파일이 성공적으로 복제되었습니다:\", response.data);\n        // 필요하면 여기서 추가적인 상태 업데이트 또는 로직 수행\n      } else {\n        throw new Error(response.message);\n      }\n    } catch (error) {\n      console.error(\"다른 이름으로 파일 저장 실패:\", error.message);\n      if (error.response) {\n        switch (error.response.status) {\n          case 400:\n            alert(\"파라미터 필수 항목이 누락되었거나 형식이 잘못되었습니다.\");\n            break;\n          case 403:\n            alert(\"해당 파일을 변경할 권한이 없습니다.\");\n            break;\n          case 404:\n            alert(\n              \"원본 파일을 찾을 수 없어 다른 이름으로 파일 저장이 불가능 합니다.\",\n            );\n            break;\n          case 409:\n            alert(\"동일한 이름의 파일이 이미 해당 경로에 존재합니다.\");\n            break;\n          case 500:\n          default:\n            alert(\"요청을 처리하는 중에 서버에서 오류가 발생했습니다.\");\n            break;\n        }\n      }\n    }\n  };\n\n  // axios.post 를 이용한 모킹데이터\n  // try {\n  //   // 모킹 데이터 (실제 백엔드 연결 시 해당 URL을 사용)\n  //   const API_URL = \"/api/saveFile\"; // 가상의 API endpoint\n  //   const response = await axios.post(API_URL, fileData);\n\n  //   // 만약 실제로 백엔드와 연동한다면, 백엔드의 응답 형식에 따라 아래 코드를 조정해야 합니다.\n  //   if (response.status === 200) {\n  //     setSaveStatus(\"success\");\n  //     return response.data; // 혹은 원하는 데이터 반환\n  //   } else {\n  //     setSaveStatus(\"failed\");\n  //     throw new Error(response.data.message);\n  //   }\n  // } catch (error) {\n  //   setSaveStatus(\"failed\");\n  //   console.error(\"Error saving the file:\", error);\n  //   throw error;\n  // }\n\n  const editFolderNameMutation = useMutation(updateFolderNameAPI, {\n    onError: (error) => {\n      console.error(\"폴더 이름 수정 에러:\", error);\n    },\n    onSuccess: (data) => {\n      console.log(\"폴더 이름 수정 성공:\", data.message);\n      // 리덕스 상태 업데이트 로직 추가 TODO\n    },\n  });\n\n  const editFolderName = (newName) => {\n    editFolderNameMutation.mutate({\n      newFolderName: newName,\n    });\n  };\n\n  const editFileName = (fileId, newName) => {\n    editFileNameMutation.mutate({\n      fileId,\n      newName,\n      // 다른 필요한 인자들 추가...TODO\n    });\n  };\n\n  const editFileNameMutation = useMutation(editFileNameAPI, {\n    onError: (error) => {\n      console.error(\"파일 이름 수정 에러:\", error);\n    },\n    onSuccess: (data) => {\n      console.log(\"파일 이름 수정 성공:\", data);\n      // 필요한 경우, 리덕스나 로컬 상태 업데이트 로직 추가 TODO\n    },\n  });\n\n  /////////////////delete 관련\n  const deleteFolderMutation = useMutation(deleteFolderAPI, {\n    onError: (error) => {\n      console.error(\"폴더 삭제 에러:\", error);\n    },\n    onSuccess: (data) => {\n      console.log(\"폴더 삭제 성공:\", data.message);\n      // 리덕스나 로컬 상태 업데이트 로직 추가 TODO\n    },\n  });\n\n  const deleteFolder = (folderId) => {\n    deleteFolderMutation.mutate(folderId);\n  };\n\n  const deleteFileMutation = useMutation(deleteFileAPI, {\n    onError: (error) => {\n      switch (error.message) {\n        case \"파라미터 필수 항목이 누락되었거나 형식이 잘못되었습니다.\":\n          console.error(\"파일 삭제 에러: 잘못된 파라미터\");\n          break;\n        case \"해당 파일을 삭제할 권한이 없습니다.\":\n          console.error(\"파일 삭제 권한이 없습니다.\");\n          break;\n        case \"지정된 경로에 해당하는 파일이 존재하지 않습니다.\":\n          console.error(\"파일 삭제 에러: 파일을 찾을 수 없습니다.\");\n          break;\n        default:\n          console.error(\"파일 삭제 중 알 수 없는 오류가 발생했습니다.\", error);\n          break;\n      }\n    },\n    onSuccess: (data) => {\n      console.log(\"파일 삭제 성공:\", data.message);\n      //리덕스 상태 업데이트 로직 추가 TODO\n    },\n  });\n\n  const deleteFile = (fileId, path, fileName) => {\n    deleteFileMutation.mutate({\n      containerId: \"exampleContainerId\", // TODO: 실제 containerId로 교체\n      fileId,\n      path,\n      fileName,\n    });\n  };\n\n  return {\n    createFile,\n    createFolder,\n    selectFileId,\n    saveFile,\n    saveStatus,\n    onSaveAs,\n    editFileName,\n    editFolderName,\n    deleteFolder,\n    deleteFile,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}